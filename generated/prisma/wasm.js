
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.3
 * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
 */
Prisma.prismaVersion = {
  client: "6.16.3",
  engine: "bb420e667c1820a8c05a38023385f6cc7ef8e83a"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  password: 'password',
  role: 'role',
  date_of_birth: 'date_of_birth',
  place_of_birth: 'place_of_birth',
  gender: 'gender',
  address: 'address',
  phone_number: 'phone_number',
  blood_type: 'blood_type',
  picture_url: 'picture_url',
  nationality: 'nationality',
  is_active: 'is_active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  email_verified_at: 'email_verified_at'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  type: 'type',
  expires_at: 'expires_at',
  user_id: 'user_id',
  createdAt: 'createdAt'
};

exports.Prisma.PlayerRelationShipsScalarFieldEnum = {
  id: 'id',
  legal_guardian_id: 'legal_guardian_id',
  player_id: 'player_id',
  relationship_type: 'relationship_type'
};

exports.Prisma.DocumentsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  title: 'title',
  file_path: 'file_path',
  document_type: 'document_type',
  uploaded_by: 'uploaded_by',
  created_At: 'created_At'
};

exports.Prisma.MedicalCertificatesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  issue_date: 'issue_date',
  document_id: 'document_id',
  is_cardiologist_cert: 'is_cardiologist_cert'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.userRole = exports.$Enums.userRole = {
  admin: 'admin',
  parent: 'parent',
  user: 'user'
};

exports.gender = exports.$Enums.gender = {
  woman: 'woman',
  man: 'man'
};

exports.RelationshipType = exports.$Enums.RelationshipType = {
  Mother: 'Mother',
  Father: 'Father',
  Guardian: 'Guardian'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  IDENTITY_PHOTO: 'IDENTITY_PHOTO',
  BIRTH_CERTIFICATE: 'BIRTH_CERTIFICATE',
  MEDICAL_CERTIFICATE: 'MEDICAL_CERTIFICATE',
  PARENTAL_AUTHORIZATION: 'PARENTAL_AUTHORIZATION'
};

exports.TokenType = exports.$Enums.TokenType = {
  EMAIL_VERIFICATION: 'EMAIL_VERIFICATION',
  PASSWORD_RESET: 'PASSWORD_RESET'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Token: 'Token',
  PlayerRelationShips: 'PlayerRelationShips',
  Documents: 'Documents',
  MedicalCertificates: 'MedicalCertificates'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\zakar\\WebstormProjects\\EHBAT\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\zakar\\WebstormProjects\\EHBAT\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.3",
  "engineVersion": "bb420e667c1820a8c05a38023385f6cc7ef8e83a",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum userRole {\n  admin\n  parent\n  user\n}\n\nenum gender {\n  woman\n  man\n}\n\nenum RelationshipType {\n  Mother\n  Father\n  Guardian\n}\n\nenum DocumentType {\n  IDENTITY_PHOTO\n  BIRTH_CERTIFICATE\n  MEDICAL_CERTIFICATE\n  PARENTAL_AUTHORIZATION\n}\n\nenum TokenType {\n  EMAIL_VERIFICATION\n  PASSWORD_RESET\n}\n\nmodel Users {\n  id                Int       @id @default(autoincrement())\n  first_name        String\n  last_name         String\n  email             String    @unique\n  password          String\n  role              userRole  @default(user)\n  date_of_birth     DateTime\n  place_of_birth    String\n  gender            gender\n  address           String\n  phone_number      String\n  blood_type        String?\n  picture_url       String?   @map(\"picture\")\n  nationality       String    @default(\"Algerie\")\n  is_active         Boolean   @default(true)\n  createdAt         DateTime  @default(now())\n  updatedAt         DateTime  @updatedAt\n  deletedAt         DateTime?\n  email_verified_at DateTime?\n  tokens            Token[]\n\n  // relation\n  legal_guardian_of    PlayerRelationShips[] @relation(\"Player\")\n  players_as_guardian  PlayerRelationShips[] @relation(\"LegalGuardian\")\n  documents            Documents[]\n  medical_certificates MedicalCertificates[]\n}\n\nmodel Token {\n  id         Int       @id @default(autoincrement())\n  token      String    @unique\n  type       TokenType\n  expires_at DateTime\n  user_id    Int\n  user       Users     @relation(fields: [user_id], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n\n  @@index([user_id])\n}\n\nmodel PlayerRelationShips {\n  id                Int              @id @default(autoincrement())\n  legal_guardian_id Int\n  player_id         Int\n  relationship_type RelationshipType\n\n  player        Users @relation(\"Player\", fields: [player_id], references: [id])\n  legalGuardian Users @relation(\"LegalGuardian\", fields: [legal_guardian_id], references: [id])\n\n  @@unique([player_id])\n}\n\nmodel Documents {\n  id                   Int                  @id @default(autoincrement())\n  user_id              Int\n  title                String\n  file_path            String\n  document_type        DocumentType\n  uploaded_by          String\n  created_At           DateTime             @default(now())\n  user                 Users                @relation(fields: [user_id], references: [id])\n  medical_certificates MedicalCertificates? @relation(\"MedicalDocument\")\n\n  @@index([user_id])\n}\n\nmodel MedicalCertificates {\n  id                   Int      @id @default(autoincrement())\n  user_id              Int\n  issue_date           DateTime\n  document_id          Int      @unique\n  is_cardiologist_cert Boolean  @default(false)\n\n  user            Users     @relation(fields: [user_id], references: [id])\n  MedicalDocument Documents @relation(\"MedicalDocument\", fields: [document_id], references: [id])\n\n  @@index([document_id])\n}\n",
  "inlineSchemaHash": "9f70c3dea4f4e2191fab6dc63e13144222afbf0ccdbe6b96d8b445b013888fe5",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Users\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"first_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"last_name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"userRole\"},{\"name\":\"date_of_birth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"place_of_birth\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"gender\",\"kind\":\"enum\",\"type\":\"gender\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone_number\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"blood_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"picture_url\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"picture\"},{\"name\":\"nationality\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"is_active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"deletedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"email_verified_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"tokens\",\"kind\":\"object\",\"type\":\"Token\",\"relationName\":\"TokenToUsers\"},{\"name\":\"legal_guardian_of\",\"kind\":\"object\",\"type\":\"PlayerRelationShips\",\"relationName\":\"Player\"},{\"name\":\"players_as_guardian\",\"kind\":\"object\",\"type\":\"PlayerRelationShips\",\"relationName\":\"LegalGuardian\"},{\"name\":\"documents\",\"kind\":\"object\",\"type\":\"Documents\",\"relationName\":\"DocumentsToUsers\"},{\"name\":\"medical_certificates\",\"kind\":\"object\",\"type\":\"MedicalCertificates\",\"relationName\":\"MedicalCertificatesToUsers\"}],\"dbName\":null},\"Token\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"TokenType\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"TokenToUsers\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"PlayerRelationShips\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"legal_guardian_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"player_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"relationship_type\",\"kind\":\"enum\",\"type\":\"RelationshipType\"},{\"name\":\"player\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"Player\"},{\"name\":\"legalGuardian\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"LegalGuardian\"}],\"dbName\":null},\"Documents\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"file_path\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"document_type\",\"kind\":\"enum\",\"type\":\"DocumentType\"},{\"name\":\"uploaded_by\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_At\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"DocumentsToUsers\"},{\"name\":\"medical_certificates\",\"kind\":\"object\",\"type\":\"MedicalCertificates\",\"relationName\":\"MedicalDocument\"}],\"dbName\":null},\"MedicalCertificates\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"issue_date\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"document_id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"is_cardiologist_cert\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"Users\",\"relationName\":\"MedicalCertificatesToUsers\"},{\"name\":\"MedicalDocument\",\"kind\":\"object\",\"type\":\"Documents\",\"relationName\":\"MedicalDocument\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

